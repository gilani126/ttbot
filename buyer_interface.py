from bot_init import create_bot
from telebot import types
import logging
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', mode='a')
    ]
)

bot = create_bot()
admin_chat_id = '6853962237'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite."""
    conn = sqlite3.connect('marketplace.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üõí –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å"), types.KeyboardButton("üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def show_categories(message):
    with get_db_connection() as conn:
        categories = conn.execute("SELECT * FROM categories").fetchall()
        if categories:
            markup = types.InlineKeyboardMarkup()
            for category in categories:
                markup.add(types.InlineKeyboardButton(category["name"], callback_data=f"category_{category['id']}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def choose_category(call):
    category_id = call.data.split("_")[1]
    show_subcategories(call.message, category_id)

def show_subcategories(message, category_id):
    with get_db_connection() as conn:
        subcategories = conn.execute("SELECT * FROM subcategories WHERE category_id = ?", (category_id,)).fetchall()
        if subcategories:
            markup = types.InlineKeyboardMarkup()
            for subcategory in subcategories:
                markup.add(types.InlineKeyboardButton(subcategory["name"], callback_data=f"subcategory_{subcategory['id']}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def show_items(message, subcategory_id):
    with get_db_connection() as conn:
        items = conn.execute("SELECT * FROM items WHERE subcategory_id = ?", (subcategory_id,)).fetchall()
        if items:
            markup = types.InlineKeyboardMarkup()
            for item in items:
                markup.add(types.InlineKeyboardButton(f"{item['name']} - {item['price']}‚ÇΩ", callback_data=f"item_{item['id']}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def handle_item_purchase(call):
    item_id = call.data.split("_")[1]
    with get_db_connection() as conn:
        item = conn.execute("SELECT * FROM items WHERE id = ?", (item_id,)).fetchone()
        if item:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"))
            markup.add(types.KeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT TRC20)"))
            markup.add(types.KeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ"))
            bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {item['name']}. –¶–µ–Ω–∞: {item['price']}‚ÇΩ. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É?",
                             reply_markup=markup)
            bot.register_next_step_handler(call.message, handle_payment_choice, item)
        else:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def handle_payment_choice(message, item):
    try:
        if message.text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥":
            bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: ...")
        elif message.text == "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT TRC20)":
            bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã USDT TRC20: ...")
        elif message.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–µ":
            bot.send_message(message.chat.id, "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –æ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏.")

        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª"))
        bot.send_message(message.chat.id, "–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
