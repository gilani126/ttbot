from bot_init import create_bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
from marketplace import cursor, conn

from telebot import types
import logging



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG - —Å–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, ERROR - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', mode='a')  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª 'bot.log'
    ]
)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
logging.debug("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
logging.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
logging.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
logging.critical("–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")


bot = create_bot()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞

admin_chat_id = '6853962237'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# –°—Ü–µ–Ω–∞—Ä–∏–π 1: –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å

def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üõí –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å"))
    markup.add(types.KeyboardButton("üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def show_categories(message, cursor):
    try:
        categories = cursor.execute("SELECT * FROM categories").fetchall()
        if not categories:
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        inline_markup = types.InlineKeyboardMarkup()
        for category in categories:
            inline_markup.add(types.InlineKeyboardButton(category[1], callback_data=f"category_{category[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_subcategories(message, category_id, cursor):
    try:
        subcategories = cursor.execute("SELECT * FROM subcategories WHERE category_id = ?", (category_id,)).fetchall()
        if not subcategories:
            bot.send_message(message.chat.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        inline_markup = types.InlineKeyboardMarkup()
        for subcategory in subcategories:
            inline_markup.add(types.InlineKeyboardButton(subcategory[1], callback_data=f"subcategory_{subcategory[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_items(message, subcategory_id, cursor):
    try:
        items = cursor.execute("SELECT * FROM items WHERE subcategory_id = ?", (subcategory_id,)).fetchall()
        if not items:
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        inline_markup = types.InlineKeyboardMarkup()
        for item in items:
            inline_markup.add(types.InlineKeyboardButton(f"{item[1]} - {item[3]}‚ÇΩ", callback_data=f"item_{item[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=inline_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_item_purchase(message, item_id, cursor):
    try:
        item = cursor.execute("SELECT * FROM items WHERE id = ?", (item_id,)).fetchone()
        if item:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"))
            markup.add(types.KeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT TRC20)"))
            markup.add(types.KeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ"))
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {item[1]}. –¶–µ–Ω–∞: {item[3]}‚ÇΩ. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É?",
                             reply_markup=markup)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã
            bot.register_next_step_handler(message, handle_payment_choice, item)
        else:
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_payment_choice(message, item, cursor):
    try:
        if message.text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥":
            bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: ...")
        elif message.text == "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT TRC20)":
            bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã USDT TRC20: ...")
        elif message.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–µ":
            bot.send_message(message.chat.id, "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –æ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏.")

        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª"))
        bot.send_message(message.chat.id, "–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°—Ü–µ–Ω–∞—Ä–∏–π 2: –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å

# –°—Ü–µ–Ω–∞—Ä–∏–π 2: –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å

def handle_sell(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def handle_item_info(message):
    # –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞.")
    show_categories(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

def show_categories(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = cursor.execute("SELECT * FROM categories").fetchall()
    markup = create_category_buttons(categories)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

def create_category_buttons(categories, cancel_action="admin_cancel"):
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(category[1], callback_data=f"choose_category_{category[0]}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=cancel_action))
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_category_"))
def choose_category(call):
    category_id = call.data.split("_")[2]
    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    show_subcategories(call.message, category_id)

def show_subcategories(message, category_id):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = cursor.execute("SELECT * FROM subcategories WHERE category_id=?", (category_id,)).fetchall()
    if subcategories:
        markup = create_subcategory_buttons(subcategories, category_id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

def create_subcategory_buttons(subcategories, category_id, cancel_action="admin_cancel"):
    markup = types.InlineKeyboardMarkup()
    for subcategory in subcategories:
        markup.add(types.InlineKeyboardButton(subcategory[1], callback_data=f"choose_subcategory_{subcategory[0]}_{category_id}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=cancel_action))
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_subcategory_"))
def choose_subcategory(call):
    subcategory_id, category_id = call.data.split("_")[2], call.data.split("_")[3]
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    collect_item_details(call.message, category_id, subcategory_id)

def collect_item_details(message, category_id, subcategory_id):
    # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, collect_item_name, category_id, subcategory_id)

def collect_item_name(message, category_id, subcategory_id):
    item_name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, collect_item_price, item_name, category_id, subcategory_id)

def collect_item_price(message, item_name, category_id, subcategory_id):
    item_price = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, collect_item_description, item_name, item_price, category_id, subcategory_id)

def collect_item_description(message, item_name, item_price, category_id, subcategory_id):
    item_description = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å. –ù–∞–∂–º–∏—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
    bot.register_next_step_handler(message, collect_item_photos, item_name, item_price, item_description, category_id, subcategory_id)

def collect_item_photos(message, item_name, item_price, item_description, category_id, subcategory_id):
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –∫–æ–º–∞–Ω–¥—É "–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
    if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        bot.send_message(admin_chat_id, f"–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {item_name}, {item_price}‚ÇΩ. –û–ø–∏—Å–∞–Ω–∏–µ: {item_description}")
        # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞: "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_item"))
        markup.add(types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_item"))
        bot.send_message(admin_chat_id, "–û–¥–æ–±—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Ç–æ–≤–∞—Ä.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ñ–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É '–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

def approve_item(call):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç ID, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        item_id = call.message.reply_to_message.text.split(":")[1].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        cursor.execute("UPDATE items SET approved = 1 WHERE id = ?", (item_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω!")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–∞–≤—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        bot.send_message(admin_chat_id, f"–¢–æ–≤–∞—Ä —Å ID {item_id} –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        bot.send_message(item_id, "–í–∞—à —Ç–æ–≤–∞—Ä –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def reject_item(call):
    try:
        item_id = call.message.reply_to_message.text.split(":")[1].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        cursor.execute("UPDATE items SET approved = 0 WHERE id = ?", (item_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–∞–≤—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        bot.send_message(admin_chat_id, f"–¢–æ–≤–∞—Ä —Å ID {item_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        bot.send_message(item_id, "–í–∞—à —Ç–æ–≤–∞—Ä –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
