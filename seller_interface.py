from bot_init import create_bot
from telebot import types
import logging
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', mode='a')
    ]
)

bot = create_bot()
admin_chat_id = '6853962237'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite."""
    conn = sqlite3.connect('marketplace.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

# –°—Ç–∞—Ç—É—Å—ã
WAITING_CATEGORY = 1
WAITING_SUBCATEGORY = 2
WAITING_ITEM_NAME = 3
WAITING_ITEM_PRICE = 4
WAITING_ITEM_DESCRIPTION = 5
WAITING_ITEM_CONTENT = 6
WAITING_ADMIN_APPROVAL = 7

user_data = {}

def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üõí –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å"), types.KeyboardButton("üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å")
def handle_sell(message):
    user_data[message.chat.id] = {'step': WAITING_CATEGORY}
    show_categories(message)

def show_categories(message):
    with get_db_connection() as conn:
        categories = conn.execute("SELECT * FROM categories").fetchall()
        if categories:
            markup = types.InlineKeyboardMarkup()
            for category in categories:
                markup.add(types.InlineKeyboardButton(category["name"], callback_data=f"category_{category['id']}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def choose_category(call):
    category_id = call.data.split("_")[1]
    user_data[call.message.chat.id]['category_id'] = category_id
    user_data[call.message.chat.id]['step'] = WAITING_SUBCATEGORY
    show_subcategories(call.message, category_id)

def show_subcategories(message, category_id):
    with get_db_connection() as conn:
        subcategories = conn.execute("SELECT * FROM subcategories WHERE category_id = ?", (category_id,)).fetchall()
        if subcategories:
            markup = types.InlineKeyboardMarkup()
            for subcategory in subcategories:
                markup.add(types.InlineKeyboardButton(subcategory["name"], callback_data=f"subcategory_{subcategory['id']}"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory_"))
def choose_subcategory(call):
    subcategory_id = call.data.split("_")[1]
    user_data[call.message.chat.id]['subcategory_id'] = subcategory_id
    user_data[call.message.chat.id]['step'] = WAITING_ITEM_NAME
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('step') == WAITING_ITEM_NAME)
def handle_item_name(message):
    user_data[message.chat.id]['item_name'] = message.text
    user_data[message.chat.id]['step'] = WAITING_ITEM_PRICE
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('step') == WAITING_ITEM_PRICE)
def handle_item_price(message):
    try:
        price = float(message.text)
        user_data[message.chat.id]['item_price'] = price
        user_data[message.chat.id]['step'] = WAITING_ITEM_DESCRIPTION
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('step') == WAITING_ITEM_DESCRIPTION)
def handle_item_description(message):
    user_data[message.chat.id]['item_description'] = message.text
    user_data[message.chat.id]['step'] = WAITING_ITEM_CONTENT
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ –ì–æ—Ç–æ–≤–æ'.")

@bot.message_handler(content_types=['photo', 'text'], func=lambda message: user_data.get(message.chat.id, {}).get('step') == WAITING_ITEM_CONTENT)
def handle_item_content(message):
    if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ –ì–æ—Ç–æ–≤–æ":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        with get_db_connection() as conn:
            conn.execute("""
                INSERT INTO items (name, price, description, subcategory_id, approved)
                VALUES (?, ?, ?, ?, ?)
            """, (
                user_data[message.chat.id]['item_name'],
                user_data[message.chat.id]['item_price'],
                user_data[message.chat.id]['item_description'],
                user_data[message.chat.id]['subcategory_id'],
                0  # –¢–æ–≤–∞—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
            ))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve"), types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject"))
        bot.send_message(admin_chat_id, f"–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
                                       f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[message.chat.id]['category_id']}\n"
                                       f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[message.chat.id]['subcategory_id']}\n"
                                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[message.chat.id]['item_name']}\n"
                                       f"–¶–µ–Ω–∞: {user_data[message.chat.id]['item_price']}‚ÇΩ\n"
                                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data[message.chat.id]['item_description']}",
                         reply_markup=markup)

        bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.callback_query_handler(func=lambda call: call.data == "approve")
def approve_item(call):
    # –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    bot.send_message(admin_chat_id, "–¢–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω.")
    bot.send_message(call.message.chat.id, "–í–∞—à —Ç–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω. –û–Ω —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î, —á—Ç–æ–±—ã —Ç–æ–≤–∞—Ä –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

@bot.callback_query_handler(func=lambda call: call.data == "reject")
def reject_item(call):
    bot.send_message(admin_chat_id, "–¢–æ–≤–∞—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    bot.send_message(call.message.chat.id, "–í–∞—à —Ç–æ–≤–∞—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
    user_data[call.message.chat.id]['step'] = WAITING_ITEM_DESCRIPTION

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('step') == WAITING_ITEM_DESCRIPTION)
def handle_rejection_reason(message):
    reason = message.text
    bot.send_message(message.chat.id, f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reason}")
    bot.send_message(admin_chat_id, f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {reason}")
    bot.send_message(message.chat.id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
