import sqlite3
import logging
from bot_init import create_bot
from buyer_interface import start, show_categories, show_subcategories, show_items, handle_item_purchase
from admin_interface import admin_panel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', mode='a')
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = create_bot()

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
bot.remove_webhook()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î
def execute_query(query, params=()):
    try:
        with sqlite3.connect('marketplace.db') as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            conn.commit()
            return cursor.fetchall()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

@bot.message_handler(commands=['start'])
def handle_start(message):
    start(message)

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üõí –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å")
def handle_buy(message):
    categories = execute_query("SELECT * FROM categories")
    if not categories:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    show_categories(message)

@bot.message_handler(func=lambda message: message.text == "üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å")
def handle_sell(message):
    categories = execute_query("SELECT * FROM categories")
    if not categories:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    show_categories(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ–≤–∞—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def handle_category(call):
    try:
        category_id = int(call.data.split('_')[1])
        show_subcategories(call.message, category_id)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory_"))
def handle_subcategory(call):
    try:
        subcategory_id = int(call.data.split('_')[1])
        show_items(call.message, subcategory_id)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def handle_item(call):
    try:
        item_id = int(call.data.split('_')[1])
        handle_item_purchase(call.message, item_id)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0, timeout=1000)
