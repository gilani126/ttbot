from bot_init import create_bot  # Import the function to create the bot
from buyer_interface import start, show_categories, show_subcategories, show_items, handle_item_purchase
from admin_interface import admin_panel
from marketplace import conn, cursor
import sqlite3  # Import sqlite3 for database operations
import logging 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG - —Å–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, ERROR - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', mode='a')  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª 'bot.log'
    ]
)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
logging.debug("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
logging.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
logging.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
logging.critical("–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")


# Initialize the bot object
bot = create_bot()

# Initialize the database connection and cursor
conn = sqlite3.connect('marketplace.db', check_same_thread=False)
cursor = conn.cursor()

@bot.message_handler(commands=['start'])
def handle_start(message):
    start(message)

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
bot.remove_webhook()

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üõí –Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å")
def handle_buy(message):
    try:
        categories = cursor.execute("SELECT * FROM categories").fetchall()
        if not categories:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        show_categories(message)
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@bot.message_handler(func=lambda message: message.text == "üíº –Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å")
def handle_sell(message):
    try:
        categories = cursor.execute("SELECT * FROM categories").fetchall()
        if not categories:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        show_categories(message, cursor)
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# Handling categories, subcategories, items
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def handle_category(call):
    try:
        category_id = int(call.data.split('_')[1])
        show_subcategories(call.message, category_id, cursor)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    except sqlite3.Error as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory_"))
def handle_subcategory(call):
    try:
        subcategory_id = int(call.data.split('_')[1])
        show_items(call.message, subcategory_id, cursor)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    except sqlite3.Error as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def handle_item(call):
    try:
        item_id = int(call.data.split('_')[1])
        handle_item_purchase(call.message, item_id, cursor)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞.")
    except sqlite3.Error as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

        logging.debug 

# Start the bot
bot.polling(none_stop=True, interval=0, timeout=1000)
